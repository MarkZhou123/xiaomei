#!/bin/bash

tag=$2

main () {
  env=$1
  if test "$env" != qa -a "$env" != production; then
    echo "usage: $0 (qa | production) [tag]"
    exit 1
  fi
  cd $(dirname $0)/..
  test $env = qa && branch=$(git rev-parse --abbrev-ref HEAD) || branch=master

  git fetch origin $branch --tags --prune || exit 1

  get_deploy_tag $env $branch
  GOENV=$env release/bin/tools deploy $tag

  clear_tags $env
}

get_deploy_tag () {
  env=$1
  branch=$2

  # 如果没有指定tag, 获取现有tag或新建tag
  if test "$tag" = ''; then
    if ! tag=$(git describe --tags --exact-match $branch 2>/dev/null); then
      tag=$env`date +%m%d-%H%M%S` && git tag $tag $branch || exit 1
    fi
  else
    # 检查指定的tag是否在指定的分支上
    if git rev-parse $tag >/dev/null 2>&1; then
      if ! git merge-base --is-ancestor $tag $branch &&
         ! git merge-base --is-ancestor $tag remotes/origin/$branch; then
        echo "tag $tag is not in branch $branch";
        exit 1;
      fi
    else
      echo "no tag: $tag"; exit 1;
    fi
  fi

  # 如果tag没有$env前缀，设置前缀，并重建tag
  if [[ "$tag" != "$env"* ]]; then
    shopt -s extglob
    if [[ "$tag" = @(qa|production)* ]]; then
      tag="${tag/#@(qa|production)/$env}"
    else
      tag="$env$tag"
    fi
    git tag $tag $branch || exit 1
  fi

  git push origin $tag $branch || exit 1
}

clear_tags () {
  env=$1
  echo

  # clear remote obsolete deploy tags
  obsolete=$(
  git ls-remote --tags origin refs/tags/$env'*' |
  egrep -o '\<refs/tags/'$env'[0-9]{4}-[0-9]{6}\>' | head -n -5
  )
  test -z "$obsolete" || git push --delete origin $obsolete

  # clear local obsolete deploy tags
  for local_tag in $(git tag -l $env'*'); do
    git ls-remote --tags --exit-code origin "$local_tag" >/dev/null || git tag -d "$local_tag"
  done

}

main $1

